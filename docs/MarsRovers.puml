@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

left to right direction

MarsRover --> CompassPoint
MarsRover *-- Plateau
MissionControl *-- MarsRover
RectangularPlateau ..|> Plateau
CircularPlateau ..|> Plateau

class MissionControl {
+rovers: List<MarsRover>

}

class MarsRover {
-roverPositionX: Integer
-roverPositionY: Integer
-facingPosition: CompassPoint
-plateau: Plateau
-moveInstructionsLeftToDo: String

+MarsRover(plateau:
Plateau, startPositionX: Integer, startPositionY: Integer, startFacingPosition: CompassPoint)
-turnLeft(): void
-turnRight(): void
-movesForward(): void
+executeNextMoveInstruction(): void
+getRoverPositionX(): Integer
+getRoverPositionY(): Integer
+getFacingPosition(): CompassPoint
+getRoverPositionAndOrientation(): String
+setMoveInstructions(moveInstructions: String):void
}

Interface Plateau {
+isPlateauPositionSafeToMoveTo(positionX: Integer, positionY: Integer): boolean
+registerRovers(rovers: List<MarsRover>): void
}

class RectangularPlateau {
-plateauMaxSizeX: Integer
-plateauMaxSizeY: Integer
-rovers: List<MarsRover>
'creating a constructor here to
+RectangularPlateau(plateauMaxSizeX: Integer, plateauMaxSizeY: Integer)
}

class CircularPlateau {
-plateauMaxRadius: Integer
-rovers: List<MarsRover>
'creating a constructor here to
+CircularPlateau(plateauMaxRadius: Integer)
}


enum CompassPoint{
N,
S,
E,
W
}

@enduml